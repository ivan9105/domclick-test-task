--WITH

DROP TABLE IF EXISTS ORDERS;

CREATE TABLE ORDERS(
  ID        SERIAL PRIMARY KEY,
  CITY      VARCHAR(50),
  QUANTITY  BIGINT,
  PRODUCT   VARCHAR(50),
  AMOUNT    DECIMAL(20, 2)
);

--нагенерируем данных
INSERT INTO ORDERS(CITY, PRODUCT, QUANTITY, AMOUNT)
SELECT (
    CASE (RANDOM() * 4)::INT
      WHEN 0 THEN 'Самара'
      WHEN 1 THEN 'Москва'
      WHEN 2 THEN 'Саратов'
      WHEN 3 THEN 'Краматорск'
      WHEN 4 THEN 'Новосибирск'
    END
  ),
  (
    CASE (RANDOM() * 4)::INT
      WHEN 0 THEN 'Cuba Platform'
      WHEN 1 THEN '1C'
      WHEN 2 THEN 'Maxorta'
      WHEN 3 THEN 'Agent Platform'
      WHEN 4 THEN 'Charge Bee'
    END
  ),
  RANDOM() * 10 + 1,
  ROUND(RANDOM()::decimal * 10000, 2)
FROM GENERATE_SERIES(1, 100000) seq;

--топ 1 городов с доходом от продаж больше 100000000

WITH SALES_PER_CITY_AND_PRODUCT AS (
        SELECT CITY, SUM(AMOUNT) AS TOTAL_SALES
        FROM ORDERS
        GROUP BY CITY
     ), TOP_CITY AS (
        SELECT CITY
        FROM SALES_PER_CITY_AND_PRODUCT
        WHERE TOTAL_SALES > 100000000
        ORDER BY TOTAL_SALES DESC
        LIMIT 1
     )
SELECT CITY,
       SUM(QUANTITY) AS PRODUCT_UNITS,
       SUM(AMOUNT) AS PRODUCT_SALES
FROM ORDERS
WHERE CITY IN (SELECT CITY FROM TOP_CITY)
GROUP BY CITY;


--поиск и удаление дублей через оконную функцию ROW_NUMBER()

WITH DUPLICATE_COUNT AS(
 SELECT CITY, PRODUCT, COUNT(ID) AS NUMBER_OF_DUBLICATE
        FROM ORDERS
        GROUP BY CITY, PRODUCT
        HAVING COUNT(ID) >= 2
),
DUPLICATE_COUNT_WITH_ROW_NUMBER AS (
SELECT
 ORD.ID,
 ROW_NUMBER() OVER(PARTITION BY ORD.CITY, ORD.PRODUCT ORDER BY ORD.CITY) ROW_NUMBER
 FROM ORDERS ORD
 JOIN DUPLICATE_COUNT DC ON DC.PRODUCT = ORD.PRODUCT AND DC.CITY = ORD.CITY
)
DELETE FROM ORDERS WHERE ID IN (SELECT DCWRN.ID FROM DUPLICATE_COUNT_WITH_ROW_NUMBER DCWRN WHERE ROW_NUMBER <> 1)

--WITH RECURSIVE

CREATE TABLE PLACE (
    ID        SERIAL PRIMARY KEY,
    PARENT_ID INT REFERENCES PLACE(ID),
    NAME      VARCHAR(100)
);

INSERT INTO PLACE
(PARENT_ID, NAME)
VALUES
(null, 'Планета Земля'),
(1, 'Континент Евразия'),
(1, 'Континент Северная Америка'),
(2, 'Европа'),
(4, 'Россия'),
(4, 'Германия'),
(5, 'Москва'),
(5, 'Санкт-Петербург'),
(6, 'Берлин');


WITH RECURSIVE PLACE_TREE AS (
   -- инициализация
   SELECT ID, PARENT_ID, NAME, 1 AS LEVEL
   FROM PLACE
   WHERE PARENT_ID IS NULL

   UNION ALL

   -- рекурсивная часть
   SELECT PLACE.ID, PLACE.PARENT_ID, PLACE.NAME, PLACE_TREE.LEVEL + 1 AS LEVEL
   FROM PLACE
      JOIN PLACE_TREE
          ON PLACE.PARENT_ID = PLACE_TREE.ID
)
SELECT * FROM PLACE_TREE;