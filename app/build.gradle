apply plugin: 'com.palantir.docker'
apply plugin: 'org.springframework.boot'

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
    }
}

bootJar {
    getArchiveBaseName().set('domclick-test-task')
    version = '1.0-SNAPSHOT'

    doLast {
        def sep = File.separator
        def jarPath = jar.getArchiveFile().get().getAsFile().getPath().replaceAll("app-1.0-SNAPSHOT.jar", "domclick-test-task-1.0-SNAPSHOT.jar")
        def dockerDirPath = "${project.rootDir}" + sep + "deploy" + sep + "docker"

        println("From " + jarPath)
        println("Into " + dockerDirPath)

        copy {
            from jarPath
            into dockerDirPath
        }
    }
}

dependencies {
    compile project(":job")
    compile project(":rest")

    compile("org.springframework.boot:spring-boot-starter-thymeleaf")

    compile("org.mock-server:mockserver-client-java:5.4.1")
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    compile("org.springframework.boot:spring-boot-starter-actuator:2.1.1.RELEASE")

    //test
    testCompile(group: 'org.mock-server', name: 'mockserver-netty', version: '5.4.1') {
        exclude group: 'org.slf4j'
        exclude group: 'ch.qos.logback'
    }
}

docker {
    dependsOn build
    name "domclick"

    def sep = File.separator
    dockerfile = new File(".." + sep + "deploy" + sep + "docker"  + sep + "Dockerfile")

    def archiveFile = bootJar.getArchiveFile().get().getAsFile()

    files archiveFile.getPath()
    buildArgs(['JAR_FILE': "${archiveFile.getName()}"])
}